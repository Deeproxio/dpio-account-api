name: Deeproxio.UserManagement.API-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - "master"
  - "develop"

pool: Development

variables:
- group: Local-Harbor-Registry
- name: buildConfiguration
  value: 'Release'
- name: ciImageTag
  value: 'ci-$(Build.BuildId)'

stages:
  - stage: 'Build'
    displayName: 'Build API & Docker Images'
    jobs: 
    - job: 'Build'
      displayName: 'Build Deeproxio.UserManagement.API'
      pool: Development
      variables:
        dotnetSdkVersion: '3.1.x'
      steps:

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'

      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
  
      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(buildConfiguration)'
          projects: '**/*.csproj'

      - script: docker build -f ./Deeproxio.UserManagement.API/Dockerfile -t $(harbor_endpoint)/dpio-user-management-api:latest -t $(harbor_endpoint)/dpio-user-management-api:$(ciImageTag) .
        displayName: 'docker build (API)'

      - script: docker build -f ./Deeproxio.Persistence.Identity.Migration/Dockerfile -t $(harbor_endpoint)/dpio-user-management-api-db-migration:latest -t $(harbor_endpoint)/dpio-user-management-api-db-migration:$(ciImageTag) .
        displayName: 'docker build (Migration Job)'

      - script: docker login -u $(harbor_username) -p $(harbor_password) $(harbor_endpoint)
        displayName: 'docker login (Local Harbor Registry)'

      - script: docker push $(harbor_endpoint)/dpio-user-management-api
        displayName: 'docker push (API)'

      - script: docker push $(harbor_endpoint)/dpio-user-management-api-db-migration
        displayName: 'docker push (Migration Job)'

      - task: HelmDeploy@0
        displayName: Helm package
        inputs:
          command: 'package'
          chartPath: 'chart/dpio-user-management-api'
          updateDependency: true

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: drop
  
  # - stage: 'Local'
  #   displayName: 'Deploy to the local environment'
  #   dependsOn: Build
  #   condition: |
  #     and
  #     (
  #       succeeded(),
  #       eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
  #     )
  #   jobs:
  #   - deployment: Deploy
  #     pool:
  #       vmImage: 'ubuntu-18.04'
  #     environment: dev
  #     variables:
  #     - group: Release
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - download: current
  #             artifact: drop
  #           - task: AzureWebApp@1
  #             displayName: 'Azure App Service Deploy: website'
  #             inputs:
  #               azureSubscription: 'Resource Manager - Tailspin - Space Game'
  #               appName: '$(WebAppNameDev)'
  #               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

  # - stage: 'Staging'
  #   displayName: 'Deploy to the staging environment'
  #   dependsOn: Local
  #   jobs:
  #   - deployment: Deploy
  #     pool:
  #       vmImage: 'ubuntu-18.04'
  #     environment: staging
  #     variables:
  #     - group: 'Release'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - download: current
  #             artifact: drop
  #           - task: AzureWebApp@1
  #             displayName: 'Azure App Service Deploy: website'
  #             inputs:
  #               azureSubscription: 'Resource Manager - Tailspin - Space Game'
  #               appName: '$(WebAppNameStaging)'
  #               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'